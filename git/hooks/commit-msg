#!/bin/sh
# Enforce conventional commit format
# Format: <type>(<scope>): <subject>
#         <body>
#         <footer>

commit_regex='^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\([a-z0-9-]+\))?: .{1,100}$'
error_msg="Commit message does not follow conventional format!

Valid types:
  feat:     New feature
  fix:      Bug fix
  docs:     Documentation changes
  style:    Code style changes (formatting, etc)
  refactor: Code refactoring
  perf:     Performance improvements
  test:     Test additions or corrections
  build:    Build system changes
  ci:       CI configuration changes
  chore:    Maintenance tasks
  revert:   Revert previous commit

Format: <type>(<scope>): <subject>
Example: feat(emacs): add LSP support for Rust
Example: fix: resolve startup performance issue

Subject line rules:
- Max 100 characters
- No period at the end
- Use imperative mood"

# Read the commit message
commit_msg=$(cat "$1")
first_line=$(echo "$commit_msg" | head -n1)

# Check if commit message matches the pattern
if ! echo "$first_line" | grep -qE "$commit_regex"; then
    echo "$error_msg" >&2
    exit 1
fi

# Check subject line length
subject=$(echo "$first_line" | sed -E 's/^[^:]+: //')
if [ ${#subject} -gt 100 ]; then
    echo "Error: Subject line is too long (${#subject} > 100 characters)" >&2
    exit 1
fi

# Check for period at end of subject
if echo "$subject" | grep -q '\.$'; then
    echo "Error: Subject line should not end with a period" >&2
    exit 1
fi

# Special validation for guix/machines/ files
# Check if this commit modifies any guix/machines/*.scm files
machine_files=$(git diff --cached --name-only | grep '^guix/machines/.*\.scm$' || true)

if [ -n "$machine_files" ]; then
    # For machine configuration updates, enforce specific format
    if echo "$first_line" | grep -qE '^feat\(guix\): update .+ to generation [0-9]+$'; then
        # Extract the expected format from the commit body
        body=$(echo "$commit_msg" | tail -n +2)

        # Check for required generation info format
        if ! echo "$body" | grep -qE '^Generation [0-9]+ \([0-9]{4}-[0-9]{2}-[0-9]{2}\)$'; then
            echo "Error: Machine configuration commits must include generation info" >&2
            echo "Expected format:" >&2
            echo "  feat(guix): update <machine>.scm to generation N" >&2
            echo "" >&2
            echo "  Generation N (YYYY-MM-DD)" >&2
            echo "  Kernel: X.Y.Z" >&2
            echo "  guix: <commit-hash>" >&2
            echo "  myguix: <commit-hash>" >&2
            echo "" >&2
            echo "  Changes from Generation N-1:" >&2
            echo "  - Change 1" >&2
            echo "  - Change 2" >&2
            exit 1
        fi

        # Check for kernel version
        if ! echo "$body" | grep -qE '^Kernel: [0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Error: Missing or invalid kernel version line" >&2
            echo "Expected format: Kernel: X.Y.Z" >&2
            exit 1
        fi

        # Check for guix commit
        if ! echo "$body" | grep -qE '^guix: [a-f0-9]{40}$'; then
            echo "Error: Missing or invalid guix commit hash" >&2
            echo "Expected format: guix: <40-character-hash>" >&2
            exit 1
        fi

        # Check for myguix commit
        if ! echo "$body" | grep -qE '^myguix: [a-f0-9]{40}$'; then
            echo "Error: Missing or invalid myguix commit hash" >&2
            echo "Expected format: myguix: <40-character-hash>" >&2
            exit 1
        fi

        # Check for changes section (only if not generation 1)
        if ! echo "$first_line" | grep -q 'generation 1$'; then
            if ! echo "$body" | grep -q '^Changes from Generation'; then
                echo "Error: Missing 'Changes from Generation' section" >&2
                echo "This section is required for all generations except the first" >&2
                exit 1
            fi
        fi
    else
        echo "Error: Machine configuration commits must use specific format" >&2
        echo "Expected: feat(guix): update <machine>.scm to generation N" >&2
        exit 1
    fi
fi

exit 0